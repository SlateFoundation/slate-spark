/*
 * Copyright (C) 2011 Google Inc.  All rights reserved.
 * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.
 * Copyright (C) 2008 Matt Lilek <webkit@mattlilek.com>
 * Copyright (C) 2009 Joseph Pecoraro
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

const WebInspector = {
    DOMPresentationUtils: {}
};

/**
 * @return {string}
 */
function nodeNameInCorrectCase(node) {
    let shadowRootType = node.shadowRootType
    if (shadowRootType) {
        return '#shadow-root (' + shadowRootType + ')'
    }
    return node.xmlVersion ? node.nodeName : node.nodeName.toLowerCase()
}

/**
 * @param {!WebInspector.DOMNode} node
 * @param {boolean=} optimized
 * @return {string}
 */
WebInspector.DOMPresentationUtils.cssPath = function (node, optimized) {
    if (node.nodeType !== Node.ELEMENT_NODE) {
        return ''
    }

    let steps = []
    let contextNode = node
    while (contextNode) {
        let step = WebInspector.DOMPresentationUtils._cssPathStep(
            contextNode, !!optimized, contextNode === node)
        if (!step) {
            break // Error - bail out early.
        }
        steps.push(step)
        if (step.optimized) {
            break
        }
        contextNode = contextNode.parentNode
    }

    steps.reverse()
    return steps.join(' > ')
}

/**
 * @param {!WebInspector.DOMNode} node
 * @param {boolean} optimized
 * @param {boolean} isTargetNode
 * @return {?WebInspector.DOMNodePathStep}
 */
WebInspector.DOMPresentationUtils._cssPathStep = function (node, optimized, isTargetNode) {
    if (node.nodeType !== Node.ELEMENT_NODE) {
        return null
    }

    let id = node.getAttribute('id')
    if (optimized) {
        if (id) {
            return new WebInspector.DOMNodePathStep(idSelector(id), true)
        }
        let nodeNameLower = node.nodeName.toLowerCase()
        if (nodeNameLower === 'body' || nodeNameLower === 'head' || nodeNameLower === 'html') {
            return new WebInspector.DOMNodePathStep(nodeNameInCorrectCase(node), true)
        }
    }
    let nodeName = nodeNameInCorrectCase(node)

    if (id) {
        return new WebInspector.DOMNodePathStep(nodeName + idSelector(id), true)
    }
    let parent = node.parentNode
    if (!parent || parent.nodeType === Node.DOCUMENT_NODE) {
        return new WebInspector.DOMNodePathStep(nodeName, true)
    }

    /**
     * @param {!WebInspector.DOMNode} node
     * @return {!Array.<string>}
     */
    function prefixedElementClassNames(node) {
        let classAttribute = node.getAttribute('class')
        if (!classAttribute) {
            return []
        }

        return classAttribute.split(/\s+/g).filter(Boolean).map(function (name) {
            // The prefix is required to store "__proto__" in a object-based map.
            return '$' + name
        })
    }

    /**
     * @param {string} id
     * @return {string}
     */
    function idSelector(id) {
        return '#' + escapeIdentifierIfNeeded(id)
    }

    /**
     * @param {string} ident
     * @return {string}
     */
    function escapeIdentifierIfNeeded(ident) {
        if (isCSSIdentifier(ident)) {
            return ident
        }
        let shouldEscapeFirst = /^(?:[0-9]|-[0-9-]?)/.test(ident)
        let lastIndex = ident.length - 1
        return ident.replace(/./g, function(c, i) {
            return ((shouldEscapeFirst && i === 0) || !isCSSIdentChar(c)) ? escapeAsciiChar(c, i === lastIndex) : c
        })
    }

    /**
     * @param {string} c
     * @param {boolean} isLast
     * @return {string}
     */
    function escapeAsciiChar(c, isLast) {
        return '\\' + toHexByte(c) + (isLast ? '' : ' ')
    }

    /**
     * @param {string} c
     */
    function toHexByte(c) {
        let hexByte = c.charCodeAt(0).toString(16)
        if (hexByte.length === 1) {
            hexByte = '0' + hexByte
        }
        return hexByte
    }

    /**
     * @param {string} c
     * @return {boolean}
     */
    function isCSSIdentChar(c) {
        if (/[a-zA-Z0-9_-]/.test(c)) {
            return true
        }
        return c.charCodeAt(0) >= 0xA0
    }

    /**
     * @param {string} value
     * @return {boolean}
     */
    function isCSSIdentifier(value) {
        return /^-?[a-zA-Z_][a-zA-Z0-9_-]*$/.test(value)
    }

    let prefixedOwnClassNamesArray = prefixedElementClassNames(node)
    let needsClassNames = false
    let needsNthChild = false
    let ownIndex = -1
    let elementIndex = -1
    let siblings = parent.children
    for (let i = 0; (ownIndex === -1 || !needsNthChild) && i < siblings.length; ++i) {
        let sibling = siblings[i]
        if (sibling.nodeType !== Node.ELEMENT_NODE) {
            continue
        }
        elementIndex += 1
        if (sibling === node) {
            ownIndex = elementIndex
            continue
        }
        if (needsNthChild) {
            continue
        }
        if (nodeNameInCorrectCase(sibling) !== nodeName) {
            continue
        }

        needsClassNames = true
        let ownClassNames = prefixedOwnClassNamesArray.keySet
        let ownClassNameCount = 0
        for (let name in ownClassNames) {
            ++ownClassNameCount
        }
        if (ownClassNameCount === 0) {
            needsNthChild = true
            continue
        }
        let siblingClassNamesArray = prefixedElementClassNames(sibling)
        for (let j = 0; j < siblingClassNamesArray.length; ++j) {
            let siblingClass = siblingClassNamesArray[j]
            if (!ownClassNames.hasOwnProperty(siblingClass)) {
                continue
            }
            delete ownClassNames[siblingClass]
            if (!--ownClassNameCount) {
                needsNthChild = true
                break
            }
        }
    }

    let result = nodeName
    if (isTargetNode && nodeName.toLowerCase() === 'input' && node.getAttribute('type')
        && !node.getAttribute('id') && !node.getAttribute('class')) {
        result += '[type="' + node.getAttribute('type') + '"]'
    }
    if (needsNthChild) {
        result += ':nth-child(' + (ownIndex + 1) + ')'
    } else if (needsClassNames) {
        for (let prefixedName in prefixedOwnClassNamesArray.keySet) {
            result += '.' + escapeIdentifierIfNeeded(prefixedName.substr(1))
        }
    }

    return new WebInspector.DOMNodePathStep(result, false)
}

WebInspector.DOMNodePathStep = function (value, optimized) {
    this.value = value
    this.optimized = optimized || false
}

WebInspector.DOMNodePathStep.prototype = {
    /**
     * @override
     * @return {string}
     */
    toString() {
        return this.value
    }
};

/*! (C) WebReflection Mit Style License */
var CircularJSON=function(e,t){function l(e,t,o){var u=[],f=[e],l=[e],c=[o?n:"[Circular]"],h=e,p=1,d;return function(e,v){return t&&(v=t.call(this,e,v)),e!==""&&(h!==this&&(d=p-a.call(f,this)-1,p-=d,f.splice(p,f.length),u.splice(p-1,u.length),h=this),typeof v=="object"&&v?(a.call(f,v)<0&&f.push(h=v),p=f.length,d=a.call(l,v),d<0?(d=l.push(v)-1,o?(u.push((""+e).replace(s,r)),c[d]=n+u.join(n)):c[d]=c[0]):v=c[d]):typeof v=="string"&&o&&(v=v.replace(r,i).replace(n,r))),v}}function c(e,t){for(var r=0,i=t.length;r<i;e=e[t[r++].replace(o,n)]);return e}function h(e){return function(t,s){var o=typeof s=="string";return o&&s.charAt(0)===n?new f(s.slice(1)):(t===""&&(s=v(s,s,{})),o&&(s=s.replace(u,"$1"+n).replace(i,r)),e?e.call(this,t,s):s)}}function p(e,t,n){for(var r=0,i=t.length;r<i;r++)t[r]=v(e,t[r],n);return t}function d(e,t,n){for(var r in t)t.hasOwnProperty(r)&&(t[r]=v(e,t[r],n));return t}function v(e,t,r){return t instanceof Array?p(e,t,r):t instanceof f?t.length?r.hasOwnProperty(t)?r[t]:r[t]=c(e,t.split(n)):e:t instanceof Object?d(e,t,r):t}function m(t,n,r,i){return e.stringify(t,l(t,n,!i),r)}function g(t,n){return e.parse(t,h(n))}var n="~",r="\\x"+("0"+n.charCodeAt(0).toString(16)).slice(-2),i="\\"+r,s=new t(r,"g"),o=new t(i,"g"),u=new t("(?:^|([^\\\\]))"+i),a=[].indexOf||function(e){for(var t=this.length;t--&&this[t]!==e;);return t},f=String;return{stringify:m,parse:g}}(JSON,RegExp);

'use strict';

var AjaxExceptionHandler = {
    lastElementClicked: null,
    lastElementTyped: null
};

addEventListener('click', function(e) {
    AjaxExceptionHandler.lastElementClicked = e.target;
    return true;
});

addEventListener('keyup', function(e) {
    AjaxExceptionHandler.lastElementTyped = e.target;
    return true;
});

function requestExceptionHandler(connection, response, options) {
    var errorPayload = {
        // response: response,
        html: document.documentElement.innerHTML,
        location: window.location.href,
        scroll: {
            top: window.scrollTop,
            left: window.scrollLeft
        },
        elements: {}
    };

    var interestingElements = {
        active: document.activeElement,
        clicked: AjaxExceptionHandler.lastElementClicked,
        typed: AjaxExceptionHandler.lastElementTyped
    };

    for(var alias in interestingElements) {
        var el = interestingElements[alias];

        if (!el) continue;
        var cssPath = WebInspector.DOMPresentationUtils.cssPath(el, false);
        var text = el.textContent;
        var html = el.outerHTML;
        var cmp = Ext.getCmp(el);

        if (!errorPayload.elements[cssPath]) {
            errorPayload.elements[cssPath] = {
                cssPath: cssPath,
                text: text,
                html: html,
                cmp: cmp
            }
        }

        errorPayload.elements[cssPath]['last_' + alias] = true;
    }

    if (toastr) {
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-full-width",
            "preventDuplicates": false,
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut",
            "extendedTimeOut": 0,
            "timeOut": 0
        };

        var title = 'HTTP ' + response.status + ': ' + response.request.method + ' ' + response.request.url.replace(response.request.host, '|||').split('|||').pop();
        var content;

        try {
            errorParsed = JSON.parse(response.responseText);
            if (errorParsed && errorParsed.error && errorParsed.error.message) {
                content = errorParsed.error.message;
            }
        } catch (e) {
            content = response.responseText;
        }

        toastr.error(content, title);
    }
}

function bindToExtJs() {
    if (!(Ext || Ext.util || Ext.util.Observable || Ext.util.Observable.observe || Ext.data || Exta.data.Connection)) {
        return;
    }

    Ext.util.Observable.observe(Ext.data.Connection, {
        requestexception: requestExceptionHandler
    });

    // Only run once
    clearInterval(bindToExtJs.interval);

}

bindToExtJs.interval = setInterval(bindToExtJs, 100);